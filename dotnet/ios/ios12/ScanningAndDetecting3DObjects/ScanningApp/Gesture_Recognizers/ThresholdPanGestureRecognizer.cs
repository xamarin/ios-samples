// This file has been autogenerated from a class added in the UI designer.
namespace ScanningAndDetecting3DObjects;

// A custom pan gesture recognizer that fires only when a threshold is passed
internal partial class ThresholdPanGestureRecognizer : UIPanGestureRecognizer
{
	// The threshold in screen pixels after which this gesture is detected
	const double threshold = 30;

	// Whether the currently active gesture has exceeded `threshold`
	bool thresholdExceeded = false;
	internal bool ThresholdExceeded { get => thresholdExceeded; private set => thresholdExceeded = value; }

	// The initial touch location when this gesture started.
	CGPoint initialLocation = CGPoint.Empty;

	// The offset in screen space to the manipulated object
	CGPoint offsetToObject = CGPoint.Empty;

	internal ThresholdPanGestureRecognizer (IntPtr handle) : base (handle)
	{
	}

	public override UIGestureRecognizerState State
	{
		get => base.State;
		set
		{
			base.State = value;

			switch (value)
			{
				case UIGestureRecognizerState.Possible:
				case UIGestureRecognizerState.Began:
				case UIGestureRecognizerState.Changed:
					break;
				default:
					// Reset variables
					ThresholdExceeded = true;
					initialLocation = CGPoint.Empty;
					break;
			}
		}
	}

	public override void TouchesBegan (NSSet touches, UIEvent evt)
	{
		base.TouchesBegan (touches, evt);

		initialLocation = LocationInView (View);
		var vc = ViewController.Instance;
		if (vc is not null)
		{
			var obj = vc.CurrentScan?.ObjectToManipulate;
			if (obj is not null)
			{
				var objectPos = vc.SceneView.ProjectPoint (obj.WorldPosition);
				offsetToObject.X = objectPos.X - initialLocation.X;
				offsetToObject.Y = objectPos.Y - initialLocation.Y;
			}
		}
	}

	public override void TouchesMoved (NSSet touches, UIEvent evt)
	{
		base.TouchesMoved (touches, evt);

		var translationMagnitude = TranslationInView (View).Length ();

		if (!ThresholdExceeded && translationMagnitude > threshold)
		{
			thresholdExceeded = true;

			// Set the overall translation to zero as the gesture should now begin
			SetTranslation (CGPoint.Empty, View);
		}
	}

	public override CGPoint LocationInView (UIView? view)
	{
		switch (State)
		{
			case UIGestureRecognizerState.Began:
			case UIGestureRecognizerState.Changed:
				var correctedLocation = new CGPoint (initialLocation.X + TranslationInView (view).X, initialLocation.Y + TranslationInView (view).Y);
				return correctedLocation;
			default:
				return base.LocationInView (view);
		}
	}

	internal CGPoint OffsetLocationIn (UIView view) => LocationInView (view).Add (offsetToObject);
}
