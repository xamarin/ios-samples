// This file has been autogenerated from a class added in the UI designer.
using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using TransitionsDemo.AnimationControllers;
using TransitionsDemo.InteractionControllers;

namespace TransitionsDemo {
	public partial class SettingsViewController : UITableViewController {
		private List<KeyValuePair<string, Type>> animationControllers;
		private List<KeyValuePair<string, Type>> interactionControllers;

		public SettingsViewController (IntPtr handle) : base (handle)
		{
			animationControllers = new List<KeyValuePair<string, Type>> {
				new KeyValuePair<string, Type>("None", null),
				new KeyValuePair<string, Type>("Cards", typeof(CECardsAnimationController)),
				new KeyValuePair<string, Type>("Fold", typeof(CEFoldAnimationController)),
				new KeyValuePair<string, Type>("Explosion", typeof(CEExplosionAnimationController)),
				new KeyValuePair<string, Type>("Flip", typeof(CEFlipAnimationController)),
				new KeyValuePair<string, Type>("Turn", typeof(CETurnAnimationController)),
				new KeyValuePair<string, Type>("Crossfade", typeof(CECrossfadeAnimationController))
			};

			interactionControllers = new List<KeyValuePair<string, Type>> {
				new KeyValuePair<string, Type>("None", null),
				new KeyValuePair<string, Type>("HorizontalSwipe", typeof(CEHorizontalSwipeInteractionController)),
				new KeyValuePair<string, Type>("VerticalSwipe", typeof(CEVerticalSwipeInteractionController)),
				new KeyValuePair<string, Type>("Pinch", typeof(CEPinchInteractionController))
			};
		}

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section < 2) {

				Type transitionType = animationControllers [indexPath.Row].Value;
				CEReversibleAnimationController transitionInstance = null;

				if (transitionType != null)
					transitionInstance = (CEReversibleAnimationController) Activator.CreateInstance (transitionType);

				if (indexPath.Section == 0) {
					AppDelegate.NavigationControllerAnimationController = transitionInstance;
				} else if (indexPath.Section == 1) {
					AppDelegate.SettingsAnimationController = transitionInstance;
				}
			} else {

				Type interactionType = interactionControllers [indexPath.Row].Value;
				CEBaseInteractionController transitionInstance = null;

				if (interactionType != null)
					transitionInstance = (CEBaseInteractionController) Activator.CreateInstance (interactionType);

				if (indexPath.Section == 2) {
					AppDelegate.NavigationControllerInteractionController = transitionInstance;
				} else if (indexPath.Section == 3) {
					AppDelegate.SettingsInteractionController = transitionInstance;
				}
			}

			TableView.ReloadData ();
		}

		public override void WillDisplay (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath)
		{
			string transitionName = cell.TextLabel.Text;
			object currentTransition;

			if (indexPath.Section < 2) {
				currentTransition = indexPath.Section == 0 ?
					AppDelegate.NavigationControllerAnimationController : AppDelegate.SettingsAnimationController;
			} else {
				currentTransition = (indexPath.Section == 2) ?
					AppDelegate.NavigationControllerInteractionController : AppDelegate.SettingsInteractionController;
			}

			string transitionClassName = ClassToTransitionName (currentTransition);
			cell.Accessory = transitionClassName == transitionName ?
				UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = TableView.DequeueReusableCell ("cell");

			if (indexPath.Section < 2) {
				cell.TextLabel.Text = animationControllers [indexPath.Row].Key;
			} else {
				cell.TextLabel.Text = interactionControllers [indexPath.Row].Key;
			}
			return cell;
		}

		public override nint RowsInSection (UITableView tableview, nint section)
		{
			return section < 2 ? animationControllers.Count : interactionControllers.Count;
		}

		public override nint NumberOfSections (UITableView tableView)
		{
			return 4;
		}

		public override string TitleForHeader (UITableView tableView, nint section)
		{
			string resultTitle = string.Empty;

			switch (section) {
			case 0:
				resultTitle = "Navigation push / pop animation controller";
				break;
			case 1:
				resultTitle = "Settings present / dismiss animation controller";
				break;
			case 2:
				resultTitle = "Navigation pop interaction controller";
				break;
			case 3:
				resultTitle = "Settings present / dismiss interaction controller";
				break;
			}

			return resultTitle;
		}

		partial void doneButtonPresses (UIBarButtonItem sender)
		{
			DismissViewController (true, null);
		}

		private string ClassToTransitionName (object instance)
		{
			if (instance == null || instance.GetType () == typeof (CEReversibleAnimationController))
				return "None";

			string animationClass = instance.GetType ().Name;
			animationClass = animationClass.Replace ("CE", "");
			animationClass = animationClass.Replace ("AnimationController", "");
			animationClass = animationClass.Replace ("InteractionController", "");

			return animationClass;
		}
	}
}
