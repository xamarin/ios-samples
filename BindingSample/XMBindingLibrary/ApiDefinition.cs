using System;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace XMBindingLibrary
{
	// typedef void (^XMUtilityCallback) (NSString *message);
	public delegate void XMUtilityCallback(NSString message);

	// @interface XMUtilities : NSObject
	[BaseType(typeof(NSObject))]
	interface XMUtilities
	{
		// NOTE:
		// We DO NOT have to bind a constructor since the default/empty
		// constructor will be automatically generated.
		//
		// -(id) init;
		//[Export("init")]
		//IntPtr Constructor();

		// NOTE:
		// This is attributed with static because it is a class/static method.
		//
		// +(NSString *) echo:(NSString *)message;
		[Static]
		[Export("echo:")]
		string Echo(string message);

		// NOTE:
		// Methods without a parameter do not need the trailing colon (":").
		//
		// -(NSString *) speak;
		[Export("speak")]
		string Speak();

		// -(NSString *) speak:(XMGreeting)greeting;
		[Export("speak:")]
		string Speak(XMGreeting greeting);

		// NOTE:
		// Methods WITH a parameter must have a trailing colon (":").
		//
		// -(NSString *) hello:(NSString *)name;
		[Export("hello:")]
		string Hello(string name);

		// NOTE:
		// Here we have two parameters, and the method name
		// and each argument are suffxed with a colon.
		//
		// -(NSInteger) add:(NSInteger)operandUn and:(NSInteger) operandDeux;
		[Export("add:and:")]
		nint Add(nint operandUn, nint operandDeux);

		// -(NSInteger) multiply:(NSInteger)operandUn and:(NSInteger)operandDeux;
		[Export("multiply:and:")]
		nint Multiply(nint operandUn, nint operandDeux);

		// -(void) setCallback:(XMUtilityCallback) callback;
		[Export("setCallback:")]
		void SetCallback(XMUtilityCallback callback);

		// -(void) invokeCallback:(NSString *) message;
		[Export("invokeCallback:")]
		void InvokeCallback(string message);
	}

	// NOTE:
	// We create a dummy I<DelegateName> here so we can reference it from the
	// delegate prperty and other members.
	interface IXMCustomViewDelegate { }

	// @protocol XMCustomViewDelegate<NSObject>
	[Protocol]
	[Model(AutoGeneratedName = true)]
	[BaseType(typeof(NSObject))]
	interface XMCustomViewDelegate
	{
		// NOTE:
		// The [Abstract] attribute is added since this is a required member.
		//
		// @required -(void)viewWasTouched:(UIView *)view;
		[Abstract]
		[Export("viewWasTouched:")]
		void ViewWasTouched(XMCustomView view);
	}

	// NOTE:
	// We want to turn the delegate members into events, so we set the 
	// attribute's "Delegates" property to the delegate property name
	// And, we set the attribute's "Events" property to the type of the
	// delegate.
	//
	// @interface XMCustomView : UIView
	[BaseType(typeof(UIView),
		Delegates = new[] { "Delegate" },
		Events = new[] { typeof(XMCustomViewDelegate) })]
	interface XMCustomView
	{
		// @property (nonatomic, strong) NSString* name;
		[Export("name")]
		string Name { get; [NullAllowed] set; }

		// NOTE:
		// Instead of using the class type, we use the interface as this will
		// be more flexible.
		//
		// @property (nonatomic, assign) id<XMCustomViewDelegate> delegate;
		[Export("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		IXMCustomViewDelegate Delegate { get; set; }

		// NOTE:
		// The C# method name does not have to match the Objective-C name
		// because the attribute will be used to find it.
		//
		// -(void) customizeViewWithText:(NSString *)message;
		[Export("customizeViewWithText:")]
		void CustomizeView(string message);

		// NOTE:
		// This method uses the dummy interface because it accepts a protocol
		// and not a concrete type.
		//
		// -(void) doTouch:(id<XMCustomViewDelegate>)delegate;
		[Export("doTouch:")]
		void DoTouch(IXMCustomViewDelegate del);
	}
}
