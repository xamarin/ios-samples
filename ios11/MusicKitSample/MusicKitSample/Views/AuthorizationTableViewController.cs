// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using MusicKitSample.Controllers;
using StoreKit;
using MediaPlayer;
using System.Threading.Tasks;

namespace MusicKitSample {
	public partial class AuthorizationTableViewController : UITableViewController, ISKCloudServiceSetupViewControllerDelegate {
		#region Fields

		NSObject cloudServiceDidUpdateNotificationToken;
		NSObject authorizationDidUpdateNotificationToken;
		NSObject willEnterForegroundNotificationToken;

		// The instance of `AuthorizationDataSource` that provides 
		// information for the `UITableView`.
		AuthorizationDataSource authorizationDataSource;

		// A boolean value representing if a 
		// `SKCloudServiceSetupViewController` was presented while the 
		// application was running.
		bool didPresentCloudServiceSetup;

		#endregion

		#region Properties

		// The instance of `AuthorizationManager` used for querying and
		// requesting authorization status.
		public AuthorizationManager AuthorizationManager { get; set; }

		#endregion

		#region Constructors

		protected AuthorizationTableViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region Controller Life Cycle

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			authorizationDataSource = new AuthorizationDataSource (AuthorizationManager);

			// Add the notification observers needed to respond to events
			// from the `AuthorizationManager` and `UIApplication`.
			var notificationCenter = NSNotificationCenter.DefaultCenter;
			cloudServiceDidUpdateNotificationToken = notificationCenter.AddObserver (AuthorizationManager.CloudServiceDidUpdateNotification,
																					 HandleAuthorizationManagerDidUpdateNotification,
																					 null);
			authorizationDidUpdateNotificationToken = notificationCenter.AddObserver (AuthorizationManager.AuthorizationDidUpdateNotification,
																					  HandleAuthorizationManagerDidUpdateNotification,
																					  null);
			willEnterForegroundNotificationToken = notificationCenter.AddObserver (UIApplication.WillEnterForegroundNotification,
																				   HandleAuthorizationManagerDidUpdateNotification,
																				   null);

			SetAuthorizationRequestButtonState ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			SetAuthorizationRequestButtonState ();
		}

		protected override void Dispose (bool disposing)
		{
			// Remove all notification observers.
			var notificationCenter = NSNotificationCenter.DefaultCenter;
			notificationCenter.RemoveObserver (cloudServiceDidUpdateNotificationToken);
			notificationCenter.RemoveObserver (authorizationDidUpdateNotificationToken);
			notificationCenter.RemoveObserver (willEnterForegroundNotificationToken);

			cloudServiceDidUpdateNotificationToken = authorizationDidUpdateNotificationToken = willEnterForegroundNotificationToken = null;

			base.Dispose (disposing);
		}

		#endregion

		#region UI Updating Methods

		void SetAuthorizationRequestButtonState ()
		{
			if (SKCloudServiceController.AuthorizationStatus == SKCloudServiceAuthorizationStatus.NotDetermined ||
				MPMediaLibrary.AuthorizationStatus == MPMediaLibraryAuthorizationStatus.NotDetermined)
				NavigationItem.RightBarButtonItem.Enabled = true;
			else
				NavigationItem.RightBarButtonItem.Enabled = false;
		}

		#endregion

		#region User Interactions

		partial void BtnRequestAuthorization_Tapped (UIBarButtonItem sender)
		{
			Task.Factory.StartNew (async () => {
				await AuthorizationManager.RequestCloudServiceAuthorizationAsync ();
				await AuthorizationManager.RequestMediaLibraryAuthorizationAsync ();
			});
		}

		#endregion

		#region Table View Data Source

		public override nint NumberOfSections (UITableView tableView) => authorizationDataSource.NumberOfSections ();

		public override nint RowsInSection (UITableView tableView, nint section) => authorizationDataSource.NumberOfItems (section);

		public override string TitleForHeader (UITableView tableView, nint section) => authorizationDataSource.SectionTitle (section);

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell ("AuthorizationCellIdentifier", indexPath);
			cell.TextLabel.Text = authorizationDataSource.StringForItem (indexPath);
			return cell;
		}

		#endregion

		#region SKCloudServiceSetupViewController Method

		async Task PresentCloudServiceSetupAsync ()
		{
			if (didPresentCloudServiceSetup)
				return;

			/*
			 * If the current `SKCloudServiceCapability` includes 
			 * `.musicCatalogSubscriptionEligible`, this means that the currently signed
			 * in iTunes Store account is elgible for an Apple Music Trial Subscription.
			 * To provide the user with an option to sign up for a free trial, your 
			 * application can present the `SKCloudServiceSetupViewController` as 
			 * demonstrated below.
			 */
			var cloudServiceSetupViewController = new SKCloudServiceSetupViewController {
				Delegate = this
			};

			var options = new SKCloudServiceSetupOptions ();
			options.Action = SKCloudServiceSetupAction.Subscribe;
			var result = await cloudServiceSetupViewController.LoadAsync (options);

			if (result.Item2 != null)
				throw new NSErrorException (result.Item2);

			if (result.Item1) {
				didPresentCloudServiceSetup = true;
				InvokeOnMainThread (() => PresentViewController (cloudServiceSetupViewController, true, null));
			}
		}

		#endregion

		#region Notification Observing Methods

		void HandleAuthorizationManagerDidUpdateNotification (NSNotification notification)
		{
			if (SKCloudServiceController.AuthorizationStatus == SKCloudServiceAuthorizationStatus.NotDetermined ||
				MPMediaLibrary.AuthorizationStatus == MPMediaLibraryAuthorizationStatus.NotDetermined) {
				NavigationItem.RightBarButtonItem.Enabled = true;
			} else {
				NavigationItem.RightBarButtonItem.Enabled = false;

				if (AuthorizationManager.CloudServiceCapabilities.HasFlag (SKCloudServiceCapability.MusicCatalogSubscriptionEligible) &&
					AuthorizationManager.CloudServiceCapabilities.HasFlag (SKCloudServiceCapability.MusicCatalogPlayback)) {
					PresentCloudServiceSetupAsync ();
				}
			}

			TableView.ReloadData ();
		}

		#endregion

		#region SKCloudServiceSetupViewController Delegate

		[Export ("cloudServiceSetupViewControllerDidDismiss:")]
		public void DidDismiss (SKCloudServiceSetupViewController cloudServiceSetupViewController)
		{
			TableView.ReloadData ();
		}

		#endregion
	}
}
