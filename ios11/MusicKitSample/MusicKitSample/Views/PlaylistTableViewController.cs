// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MusicKitSample.Controllers;
using StoreKit;
using CoreGraphics;

namespace MusicKitSample {
	public partial class PlaylistTableViewController : UITableViewController {
		#region Fields

		NSObject libraryDidUpdateToken;

		#endregion

		#region Properties

		// The instance of `AuthorizationManager` used for querying and 
		// requesting authorization status.
		public AuthorizationManager AuthorizationManager { get; set; }

		// The instance of `MediaLibraryManager` that is used as a data 
		// source to display the contents of the application's playlist.
		public MediaLibraryManager MediaLibraryManager { get; set; }

		// The instance of `MusicPlayerManager` that is used to trigger 
		// the playback of the application's playlist.
		public MusicPlayerManager MusicPlayerManager { get; set; }

		#endregion

		#region Constructors

		public PlaylistTableViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region Controller Life Cycle

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Configure self sizing cells.
			TableView.RowHeight = UITableView.AutomaticDimension;
			TableView.EstimatedRowHeight = 140;

			// Add the notification observer needed to respond to events 
			// from the `MediaLibraryManager`.
			libraryDidUpdateToken = NSNotificationCenter.DefaultCenter.AddObserver (MediaLibraryManager.LibraryDidUpdate,
																					HandleMediaLibraryManagerLibraryDidUpdate,
																					null);
		}

		protected override void Dispose (bool disposing)
		{
			NSNotificationCenter.DefaultCenter.RemoveObserver (libraryDidUpdateToken);
			libraryDidUpdateToken = null;

			base.Dispose (disposing);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			TableView.ReloadData ();

			/*
			* It is important to actually check if your application has the
			* appropriate `SKCloudServiceCapability` options before enabling
			* functionality related to playing back content from the Apple 
			* Music Catalog or adding items to the user's Cloud Music Library.
			*/
			var cloudServiceCapabilities = AuthorizationManager.CloudServiceCapabilities;
			NavigationItem.RightBarButtonItem.Enabled = cloudServiceCapabilities.HasFlag (SKCloudServiceCapability.MusicCatalogPlayback);
		}

		#endregion

		#region TableView Data Source

		public override nint NumberOfSections (UITableView tableView) => 1;

		public override nint RowsInSection (UITableView tableView, nint section) => MediaLibraryManager.MediaPlaylist?.Items.Length ?? 0;

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell (PlaylistTableViewCell.Key, indexPath) as PlaylistTableViewCell;
			var mediaItem = MediaLibraryManager.MediaPlaylist.Items [indexPath.Row];

			cell.Title = mediaItem.Title;
			cell.Album = mediaItem.AlbumTitle;
			cell.Artist = mediaItem.Artist;
			cell.AssetCoverArt = mediaItem.Artwork?.ImageWithSize (new CGSize (90, 90));

			return cell;
		}

		#endregion

		#region User Interactions

		partial void BtnPlayPlaylist_Tapped (UIBarButtonItem sender) => MusicPlayerManager.BeginPlayback (MediaLibraryManager.MediaPlaylist);

		#endregion

		#region Notification Observer Callback Methods

		void HandleMediaLibraryManagerLibraryDidUpdate (NSNotification notification) => TableView.ReloadData ();

		#endregion
	}
}
