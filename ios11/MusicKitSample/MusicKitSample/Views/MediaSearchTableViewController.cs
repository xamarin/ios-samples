// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using MusicKitSample.Controllers;
using MusicKitSample.Models;
using System.Threading.Tasks;
using CoreGraphics;
using StoreKit;

namespace MusicKitSample {
	public partial class MediaSearchTableViewController : UITableViewController, IUISearchResultsUpdating, IUISearchBarDelegate, IMediaSearchTableViewCellDelegate {
		#region Fields

		static readonly object padlock = new object ();

		// The instance of `UISearchController` used for providing the 
		// search funcationality in the `UITableView`.
		UISearchController searchController;

		// The instance of `AppleMusicManager` which is used to make 
		// search request calls to the Apple Music Web Services.
		AppleMusicManager appleMusicManager;

		// The instance of `ImageCacheManager` that is used for 
		// downloading and caching album artwork images.
		ImageCacheManager imageCacheManager;

		MediaItem [] [] mediaItems;

		NSObject authorizationDidUpdateNotificationToken;
		NSObject willEnterForegroundNotificationToken;

		#endregion

		#region Properties

		// The instance of `AuthorizationManager` used for querying and
		// requesting authorization status.
		public AuthorizationManager AuthorizationManager { get; set; }

		// The instance of `MusicPlayerManager` which is used for 
		// triggering the playback of a `MediaItem`.
		public MusicPlayerManager MusicPlayerManager { get; set; }

		// The instance of `MediaLibraryManager` which is used for 
		// adding items to the application's playlist.
		public MediaLibraryManager MediaLibraryManager { get; set; }

		#endregion

		#region Constructors

		public MediaSearchTableViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region Controller Life Cycle

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			appleMusicManager = new AppleMusicManager ();
			imageCacheManager = new ImageCacheManager ();
			mediaItems = new MediaItem [0] [];

			// Configure self sizing cells.
			TableView.RowHeight = UITableView.AutomaticDimension;
			TableView.EstimatedRowHeight = 100;

			// Configure the `UISearchController`.
			searchController = new UISearchController (searchResultsController: null);
			searchController.SearchResultsUpdater = this;
			searchController.DimsBackgroundDuringPresentation = false;
			searchController.SearchBar.Delegate = this;
			TableView.TableHeaderView = searchController.SearchBar;
			DefinesPresentationContext = true;

			/*
			 * Add the notification observers needed to respond to events from 
			 * the `AuthorizationManager`, `MPMediaLibrary` and `UIApplication`.
			 * This is so that if the user enables/disables capabilities in the
			 * Settings app the application will reflect those changes accurately.
			 */
			var notificationCenter = NSNotificationCenter.DefaultCenter;
			authorizationDidUpdateNotificationToken = notificationCenter.AddObserver (AuthorizationManager.AuthorizationDidUpdateNotification,
																					  HandleAuthorizationManagerAuthorizationDidUpdateNotification,
																					  null);
			willEnterForegroundNotificationToken = notificationCenter.AddObserver (UIApplication.WillEnterForegroundNotification,
																				   HandleAuthorizationManagerAuthorizationDidUpdateNotification,
																				   null);
		}

		protected override void Dispose (bool disposing)
		{
			// Remove all notification observers.
			var notificationCenter = NSNotificationCenter.DefaultCenter;
			notificationCenter.RemoveObserver (authorizationDidUpdateNotificationToken);
			notificationCenter.RemoveObserver (willEnterForegroundNotificationToken);

			authorizationDidUpdateNotificationToken = willEnterForegroundNotificationToken = null;

			base.Dispose (disposing);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			if (appleMusicManager.FetchDeveloperToken () == null) {
				searchController.SearchBar.UserInteractionEnabled = false;

				var alertController = UIAlertController.Create ("Error", "No developer token was specified. See the README for more information", UIAlertControllerStyle.Alert);
				alertController.AddAction (UIAlertAction.Create ("Dismiss", UIAlertActionStyle.Cancel, null));
				PresentViewController (alertController, true, null);
			} else
				searchController.SearchBar.UserInteractionEnabled = true;
		}

		#endregion

		#region TableView Data Source

		public override nint NumberOfSections (UITableView tableView) => mediaItems.Length;

		public override nint RowsInSection (UITableView tableView, nint section) => mediaItems [section].Length;

		public override string TitleForHeader (UITableView tableView, nint section) => section == 0 ? "Songs" : "Albums";

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.DequeueReusableCell (MediaItemTableViewCell.Key, indexPath) as MediaItemTableViewCell;

			var mediaItem = mediaItems [indexPath.Section] [indexPath.Row];

			cell.MediaItem = mediaItem;
			cell.Delegate = this;

			// Image loading.
			var imageUrl = mediaItem.Artwork.GenerateImageUrl (new CGSize (90, 90));

			if (imageCacheManager.GetCachedImage (imageUrl) is UIImage image)
				// Cached: set immediately.
				cell.AssetCoverArt = image;
			else {
				cell.AssetCoverArt = indexPath.Section == 0 ? UIImage.FromBundle ("Song") : UIImage.FromBundle ("Album");
				// Not cached, so load then fade it in.
				Task.Factory.StartNew (async () => {
					image = await imageCacheManager.FetchImage (imageUrl);

					// Check the cell hasn't recycled while loading.
					if (cell.MediaItem.Id == mediaItem.Id)
						InvokeOnMainThread (() => cell.AssetCoverArt = image);
				});
			}

			var cloudServceCapabilities = AuthorizationManager.CloudServiceCapabilities;

			/* It is important to actually check if your application has the 
			 * appropriate `SKCloudServiceCapability` options before enabling 
			 * functionality related to playing back content from the Apple 
			 * Music Catalog or adding items to the user's Cloud Music Library.
			 */
			cell.AddToPlaylistButtonEnabled = cloudServceCapabilities.HasFlag (SKCloudServiceCapability.AddToCloudMusicLibrary);
			cell.PlayItemButtonEnabled = cloudServceCapabilities.HasFlag (SKCloudServiceCapability.MusicCatalogPlayback);

			return cell;
		}

		#endregion

		#region Notification Observing Methods

		void HandleAuthorizationManagerAuthorizationDidUpdateNotification (NSNotification notification) =>
			TableView.ReloadData ();

		#endregion

		#region UISearchResultsUpdating

		public void UpdateSearchResultsForSearchController (UISearchController searchController)
		{
			if (!(searchController.SearchBar.Text is string searchString))
				return;

			if (searchString == string.Empty) {
				lock (padlock) {
					mediaItems = new MediaItem [0] [];
				}
				TableView.ReloadData ();
				return;
			}

			Task.Factory.StartNew (async () => {
				var searchResults = new MediaItem [0] [];
				try {
					searchResults = await appleMusicManager.PerformAppleMusicCatalogSearchAsync (searchString, AuthorizationManager.CloudServiceStorefrontCountryCode);
				} catch (NSErrorException ex) {
					var underlyingError = ex.Error.UserInfo [NSError.UnderlyingErrorKey] as NSError;
					var message = underlyingError?.LocalizedDescription ?? "Encountered unexpected error.";

					var alertController = UIAlertController.Create ("Error", message, UIAlertControllerStyle.Alert);
					alertController.AddAction (UIAlertAction.Create ("Dismiss", UIAlertActionStyle.Cancel, null));

					InvokeOnMainThread (() => PresentViewController (alertController, true, null));
				} finally {
					lock (padlock) {
						mediaItems = searchResults;
					}

					InvokeOnMainThread (() => TableView.ReloadData ());
				}
			});
		}

		#endregion

		#region UISearchBar Delegate

		[Export ("searchBarCancelButtonClicked:")]
		public void CancelButtonClicked (UISearchBar searchBar)
		{
			lock (padlock) {
				mediaItems = new MediaItem [0] [];
			}

			TableView.ReloadData ();
		}

		#endregion

		#region MediaSearchTableViewCell Delegate

		public void AddToPlaylist (MediaItemTableViewCell mediaSearchTableViewCell, MediaItem mediaItem) =>
			Task.Factory.StartNew (async () => await MediaLibraryManager.AddItemAsync (mediaItem.Id));

		public void PlayMediaItem (MediaItemTableViewCell mediaSearchTableViewCell, MediaItem mediaItem) =>
			MusicPlayerManager.BeginPlayback (mediaItem.Id);


		#endregion
	}
}
