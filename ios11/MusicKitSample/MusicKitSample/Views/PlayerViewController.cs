// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MusicKitSample.Controllers;
using MediaPlayer;

namespace MusicKitSample {
	public partial class PlayerViewController : UIViewController {

		#region Fields

		NSObject didUpdateStateToken;

		#endregion

		#region Properties

		// The instance of `MusicPlayerManager` used by the 
		// `PlayerViewController` to control `MPMediaItem` playback.
		public MusicPlayerManager MusicPlayerManager { get; set; }

		#endregion

		#region Constructors

		public PlayerViewController (IntPtr handle) : base (handle)
		{
		}

		#endregion

		#region Controller Life Cycle

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			// Add the notification observer needed to respond to events
			// from the `MusicPlayerManager`.
			didUpdateStateToken = NSNotificationCenter.DefaultCenter.AddObserver (MusicPlayerManager.DidUpdateState,
																				  HandleMusicPlayerManagerDidUpdateState,
																				  null);

			UpdatePlaybackControls ();
			UpdateCurrentItemMetadata ();
		}

		protected override void Dispose (bool disposing)
		{
			NSNotificationCenter.DefaultCenter.RemoveObserver (didUpdateStateToken);
			didUpdateStateToken = null;

			base.Dispose (disposing);
		}

		#endregion

		#region User Interactions

		partial void BtnSkipToPrevious_TouchUpInside (UIButton sender) => MusicPlayerManager.SkipBackToBeginningOrPreviousItem ();

		partial void BtnPlayPause_TouchUpInside (UIButton sender) => MusicPlayerManager.TogglePlayPause ();

		partial void BtnSkipToNext_TouchUpInside (UIButton sender) => MusicPlayerManager.SkipToNextItem ();

		#endregion

		#region UI Update Methods

		void UpdatePlaybackControls ()
		{
			var playbackState = MusicPlayerManager.MusicPlayerController.PlaybackState;

			switch (playbackState) {
			case MPMusicPlaybackState.Stopped:
			case MPMusicPlaybackState.Paused:
			case MPMusicPlaybackState.Interrupted:
				BtnPlayPause.SetImage (UIImage.FromBundle ("Play"), UIControlState.Normal);
				break;
			case MPMusicPlaybackState.Playing:
				BtnPlayPause.SetImage (UIImage.FromBundle ("Pause"), UIControlState.Normal);
				break;
			default:
				break;
			}

			if (playbackState == MPMusicPlaybackState.Stopped) {
				BtnSkipToPrevious.Enabled = false;
				BtnPlayPause.Enabled = false;
				BtnSkipToNext.Enabled = false;
			} else {
				BtnSkipToPrevious.Enabled = true;
				BtnPlayPause.Enabled = true;
				BtnSkipToNext.Enabled = true;
			}

			UpdateCurrentItemMetadata ();
		}

		void UpdateCurrentItemMetadata ()
		{
			if (MusicPlayerManager.MusicPlayerController.NowPlayingItem is MPMediaItem nowPlayingItem) {
				ImgCurrentArtwork.Image = nowPlayingItem.Artwork?.ImageWithSize (ImgCurrentArtwork.Frame.Size);
				LblCurrentTitle.Text = nowPlayingItem.Title;
				LblCurrentAlbum.Text = nowPlayingItem.AlbumTitle;
				LblCurrentArtist.Text = nowPlayingItem.Artist;
			} else {
				ImgCurrentArtwork.Image = null;
				LblCurrentTitle.Text = string.Empty;
				LblCurrentAlbum.Text = string.Empty;
				LblCurrentArtist.Text = string.Empty;
			}
		}

		#endregion

		#region Notification Observing Methods

		void HandleMusicPlayerManagerDidUpdateState (NSNotification notification)
		{
			UpdatePlaybackControls ();
			UpdateCurrentItemMetadata ();
		}

		#endregion
	}
}
